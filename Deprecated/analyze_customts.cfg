# Analyze (FFT/fold) dedispersed timeseries produced using build_dedispts_from_fil.py or build_dedispts_from_psrfits.py and break into subbands if specified.

[data]
npy_file = guppi_58733_84767_BLGCsurvey_Cband_A00_0138_pulseprof_DM1775.0.npy ; .npy file output by build_dedispts_from_fil.py or build_dedispts_from_psrfits.py
NPY_DIR = /home/ella1/asuresh/BL_GC_Survey/PulseProf/A00_0138_58733/ ; Path to .npy file

[output]
basename = guppi_58733_84767_BLGCsurvey_Cband_A00_0138_pulseprof_DM1775.0 ; Basename for output plots or data products
OUTPUT_DIR = /home/ella1/asuresh/Pipeline/; Output path (created if non-existent)

[plotting]
show_plot = True; Do you want to view the plots live during execution? (True/False) (d: False)

[chop_time]
do_chop_time = ; Do you want to chop the time axis? (True/False) (d: False)
start_time =    ; Start time (s) (d:0)
stop_time =     ; Stop time (s) (d: End of data)

[block_averaging]
do_blkavg = True; Block average data along time? (True/False) (d: False)
blkavg_time_factor = 2; Block averaging factor (integer) along time. If float, rounding to nearest integer is performed. (d: 1)

[subbands]
do_split_subbands = False; Split the data into non-overlapping subbands? (True/False) (d: False)
; Frequency edges (GHz) of subbands.
; Specify [low freq, high freq] for each subband. Order subbands from highest to lowest frequency.
; Example: subband_edges = [[7.19,7.81],[6.10,6.90],[5.10,5.90],[4.35, 4.85]]
subband_edges = [ [7.19,7.81],[6.10,6.90],[5.10,5.90],[4.35, 4.85] ] ; (d: None)
; Subbands are labeled beginning from 0. In the above example. subband 0 = 7.19 - 7.81 GHz, subband 1 = 6.10 - 6.90 GHz, etc.
; Do you want to construct a timeseries by summing over specific subbands? List your choice of subband combinations below.
; Example format: combine_subbands = [ [0,1], [1,2] ]
; The above example tells Python to construct two timeseries, one from combining subbands 0 and 1, and the other from adding subbands 1 and 2.
combine_subbands = [ [0,1,2] ]  ; (d: None)

# Timeseries detrendin
[detrending]
do_detrend = True; Do you want to detrend the timeseries using a Savitzky-Golay filter? (d: False)
window_length_time = 1.0 ; Window length in units of time  (s) (d: 1.0)
poly_degree = 1    ; Polynomial degree (integer >= 1) (d: 1)

# Plot subband timeseries.
[timeseries_plot]
plot_timeseries = False; Do you want to plot subband timeseries after detrending? (True/False) (d: True)

# Plot FFT of timeseries and label signficant peaks.
[FFT]
do_FFT = False; Take FFT of timeseries and plot it? (True/False) (d: False)
Nfft = ; Length of FFT in number of time samples (d: length of timeseries)
search_scale = ; Find FFT peaks using either power spectra in log/linear scale. (log/linear) (d: log)
exclude_noise = ; If a point has flux < (median + (N_sigma)*rms), replace it with zero for FFT. (True/False) (d: False)
N_sigma = ; Multiplicative factor for noise exclusion (d: 3)
niter = ; Max no. of allowed iterations for iterative sigma clipping to remove noise and detect FFT peaks (d: 5)


# Time-domain folding searches on frequency-integrated timeseries
# Say that N_subbands = len(subband_edges) and N_combinations = len(combine_subbands)
# Timeseries are indexed as follows:
# 0 = frequency-summed timeseries
# j in {1, 2, ..., N_subbands} = timeseries of subband (j-1) specified in subband_edges
# j in {N_subbands+1, ..., N_subbands+N_combinations} = timeseries for index (j - N_subbands - 1) in combine_subbands
[Time_domain_folding]
do_time_domain_folding = True; Do you want to perform time-domain folding at different trial periods? (d: False)
fold_index = ; Index of timeseries to fold. Specify one index only.(d: 0)
P_min = 7.0 ; Minimum trial period (s)
P_max = 12.0 ; Maximum trial period (s)
bins_min = ; Minimum no. of phase bins for folding (d: 128)
folding_metric = reducedchisquare; Folding metric to maximize (reducedchisquare / profmax / profSNR) (d: reducedchisquare)
