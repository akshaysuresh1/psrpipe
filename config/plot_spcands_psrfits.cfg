# Plot single pulse candidates identified in a collection of PSRFITS files.

[singlepulse_files]
glob_singlepulse = puppi_58505_M87_1339_0001_0026_*.singlepulse ; Glob string to parse PRESTO .singlepulse files
SINGLEPULSE_DIR = /home/ella1/asuresh/M87_test/20190122/Set1/Psub ; Path to .singlepulse files

[data]
glob_psrfits = puppi_58505_M87_1339*.fits ; PSRFITS file name (or names if wild card characters are used)
DATA_DIR = /media/a4410/8d467e93-09f9-436f-838e-e7e4af0e166d/data/asuresh/M87_data/20190122/Set1 ; Path to PSRFITS files

[output_plots]
basename = puppi_58505_M87_1339_0001_0026 ; Basename of output products
source = M87 ; Updated source entry in single pulse candidate plot
instrument = PUPPI ; Updated instrument entry in single pulse candidate plot
# Path to which output products must be saved, will be created if non-existent. (d: DATA_DIR)
OUTPUT_DIR = /home/ella2/M87_cands/20190122/Set1
cmap = Greys ; Matplotlib color map for dynamic spectrum plotting (d: viridis)
output_formats = ; List of output plot formats (d: ['.png'])
show_plot = ; Do you want to view the single pulse candidate plot live? (True/False) (d: False)

[data_out]
write_npz = ; Do you want to write the smoothed data product to disk? (True/False) (d: False)

[spcands_filters]
low_DM_cand = 10.0     ; Lowest DM (pc/cc) to consider for single pulse candidates
high_DM_cand = 5500.0 ; Highest DM (pc/cc) to consider for single pulse candidates
sigma_cutoff = 7.0    ; Minimum S/N of candidate reported by PRESTO
exc_low_times = []   ; Lower limit of time range (s) to be excised
exc_high_times = []   ; Upper limit of time range (s) to be excised
time_margin = 5.0e-2 ; Time margin (s) to be used for duplicate candidate identification in the DM-time plane
DM_margin = 1000.0 ; DM margin (pc/cc) to be used for duplicate candidate identification in the DM-time plane

[band_edges]
freq_band_low = 1.1462 ; Lowest frequency (GHz) to be considered.
freq_band_high = 1.7555 ; Highest frequency (GHz) to be considered.

# Time range of data chunk to be loaded for each candidate
[time_range]
t_before = ; How many seconds of data before the candidate time must be loaded (d: -t_DM)
t_after = ; How many seconds of data after the candidate time must be loaded? (d: 2*t_DM)

# Polarization index to extract (0 = Stokes-I, 1 = Stokes-Q, 2 = Stokes-U, 3 = Stokes-V).
[polarization]
pol =             ; (d: 0)

[rfimask]
apply_rfimask = True ; Do you want to apply the rfifind mask? (d: Fakse)
rfimask = puppi_58505_M87_1339_0001_0026_rfifind.mask ; Rfifind mask to be applied on data
RFIMASK_DIR = /home/ella1/asuresh/M87_test/20190122/Set1/Rfimask ; Path to rfi_mask (d: DATA_DIR)

[bandpass]
bandpass_method = file ; "compute"/"file" (Compute median bandpass from loaded data, or load pre-computed bandpass from a .npz file.)
bandpass_npz = puppi_58505_M87_1339_0001_0026_bandpass.npz ; Name of .npz file containing pre-computed bandpass
BANDPASS_DIR = /home/ella1/asuresh/M87_test/20190122/Set1/Bandpass ; Path to bandpass_npz (d: DATA_DIR)

[zerodm]
remove_zerodm = True; Apply zerodm removal? (True/False) (d: False)

# Parameters for smoothing and downsampling raw dynamic spectra
[downsampling]
smoothing_method =     ; Available methods: hanning, hamming, blackman, Gaussian2D, Blockavg2D (d: Blockavg2D)
convolution_method = fftconvolve   ; Use fftconvolve/fft2 for performing convolution. (d: fftconvolve)
kernel_size_freq_chans = 8     ; No. of channels constituting a spectral kernel (Gaussian FWHM / window length) (d: 1)
low_dm_cats = [0., 693.6, 1183.2, 2203.2, 4243.2] ; Set low DM boundaries for different temporal smoothing factors. (d: [0.,])
downsamp_time = [4, 8, 16, 32, 64]    ; Downsampling factor (integer) along time for above DM ranges. (d: [1, ])

# Matched filtering
# The optimal matched filter is one whose width maximizes the S/N of a pulse in the convolution of its dedispersed profile with the filter.
[matched_filter]
do_smooth_dedisp = True; Do you want to smooth the dedispersed dynamic spectrum of a candidate along time by the optimal matched filter? (True/False) (d: False)
