# Read in a filterbank file, remove bandpass and zerodm, and downsample the data.

[data]
fil_file = spliced_blc00010203040506o7o0111213141516o7o0212223242526o7o031323334353637_guppi_58737_82545_BLGCsurvey_Cband_A00_0024.rawspec.8.0003.fil ; Filterbank file to load
DATA_DIR = /mnt/toaster2/cornell_20_part_1 ; Path to .fil file

[output]
basename = guppi_58737_82545_BLGCsurvey_Cband_A00_0024 ; Basename of output products
# Path to which output products must be saved, will be created if non-existent. (d: DATA_DIR)
OUTPUT_DIR = /home/ella1/asuresh/BL_GC_Survey/Dynspec

[plotting]
cmap = Greys ; Matplotlib color map for dynamic spectrum (d: viridis)
show_plot = ; Do you want to plot the extracted dynamic spectrum and show it live? (True/False) (d: False)

[write_data]
do_write = ; Do you want to write the final data products to disk? (True/False) (d: False)
write_format = ; Compatible formats (npz, fil) (d: npz)

[timechunk]
start_time = 23.5; Start time (s) of data chunk to be loaded
end_time = 23.9; End time (s) of data chunk to be loaded

[band_edges]
freq_band_low = 4.39 ; Lowest frequency (GHz) to be considered.
freq_band_high = 7.81 ; Highest frequency (GHz) to be considered.

# Polarization index to extract (0 = Stokes-I, 1 = Stokes-Q, 2 = Stokes-U, 3 = Stokes-V).
[polarization]
pol =             ; (d: 0)

[rfimask]
apply_rfimask = True ; Do you want to apply the rfifind mask? (d: Fakse)
rfimask = guppi_58737_82545_BLGCsurvey_Cband_A00_0024_rfifind.mask ; Rfifind mask to be applied on data
RFIMASK_DIR = /home/ella1/asuresh/BL_GC_Survey/Rfimask ; Path to rfi_mask (d: DATA_DIR)

[bandpass]
bandpass_method = file ; "compute"/"file" (Compute median bandpass from loaded data, or load pre-computed bandpass from a .npz file.)
bandpass_npz = guppi_58737_82545_BLGCsurvey_Cband_A00_0024_bandpass.npz ; Name of .npz file containing pre-computed bandpass
BANDPASS_DIR = /home/ella1/asuresh/BL_GC_Survey/Bandpass ; Path to bandpass_npz (d: DATA_DIR)

[zerodm]
remove_zerodm = True; Apply zerodm removal? (True/False) (d: False)

# Smoothing parameters
[smoothing]
smoothing_method = Blockavg2D      ; Available methods: hanning, hamming, blackman, Gaussian2D, Blockavg2D (d: Blockavg2D)
convolution_method = fftconvolve   ; Use fftconvolve/fft2 for performing convolution. (d: fftconvolve)
kernel_size_freq_chans = 128     ; No. of channels constituting a spectral kernel (Gaussian FWHM / window length)
kernel_size_time_samples = 8      ; No. of samples constituting a temporal kernel (Gaussian FWHM / window length)
