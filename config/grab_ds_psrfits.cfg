# Read in a filterbank file, remove bandpass and zerodm, and downsample the data.

[data]
glob_psrfits = puppi_58506_*.fits ; PSRFITS file (or files if wild card characters are used) to load
DATA_DIR = /home/ella1/asuresh/M87_test/20190124/Set2/Data ; Path to .fil file

[output]
basename = puppi_58506_M87_1347_0037_0072 ; Basename of output products
# Path to which output products must be saved, will be created if non-existent. (d: DATA_DIR)
OUTPUT_DIR = /home/ella1/asuresh/M87_test/20190123/Set2/Dynspec

[plotting]
cmap = Greys ; Matplotlib color map for dynamic spectrum (d: viridis)
show_plot = True; Do you want to plot the extracted dynamic spectrum and show it live? (True/False) (d: False)

[timechunk]
start_time = 1000.0 ; Start time (s) of data chunk to be loaded
end_time = 1050.0 ; End time (s) of data chunk to be loaded

[band_edges]
freq_band_low = 0.0; 1.1462 ; Lowest frequency (GHz) to be considered.
freq_band_high = 2.0; 1.7555 ; Highest frequency (GHz) to be considered.

# Polarization index to extract (0 = Stokes-I, 1 = Stokes-Q, 2 = Stokes-U, 3 = Stokes-V).
[polarization]
pol =             ; (d: 0)

[rfimask]
apply_rfimask = ; Do you want to apply the rfifind mask? (d: False)
rfimask = puppi_58506_M87_1347_0037_0072_rfifind.mask ; Rfifind mask to be applied on data
RFIMASK_DIR = /home/ella1/asuresh/M87_test/20190123/Set2/Rfimask ; Path to rfi_mask (d: DATA_DIR)

[bandpass]
bandpass_method = file ; "compute"/"file" (Compute median bandpass from loaded data, or load pre-computed bandpass from a .npz file.)
bandpass_npz = puppi_58506_M87_1347_0037_0072_bandpass.npz ; Name of .npz file containing pre-computed bandpass
BANDPASS_DIR = /home/ella1/asuresh/M87_test/20190123/Set2/Bandpass ; Path to bandpass_npz (d: DATA_DIR)

[zerodm]
remove_zerodm = False; Apply zerodm removal? (True/False) (d: False)

# Smoothing parameters
[smoothing]
smoothing_method = Blockavg2D      ; Available methods: 'hanning', 'hamming', 'blackman', 'Gaussian2D', 'Blockavg2D' (d: 'Blockavg2D')
convolution_method = fftconvolve   ; Use 'fftconvolve' or 'fft2' for performing convolution. (d: fftconvolve)
kernel_size_freq_chans = 1    ; No. of channels constituting a spectral kernel (Gaussian FWHM / window length)
kernel_size_time_samples = 4      ; No. of samples constituting a temporal kernel (Gaussian FWHM / window length)
