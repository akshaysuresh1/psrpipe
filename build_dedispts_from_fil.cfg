# Construct a dedispersed time series at a specific DM from a single filterbank file.

[data]
fil_file = spliced_blc404243444546o7o0515253545556o7o0616263646566o7o071727374757677_guppi_58733_84767_BLGCsurvey_Cband_A00_0138.rawspec.8.0003.fil ; Filterbank file name
DATA_DIR = /home/ella2/asuresh/BLGC_data/ ; Path to data directory

[output]
basename = guppi_58733_84767_BLGCsurvey_Cband_A00_0138 ; Basename for output plots or data products
OUTPUT_DIR = /home/ella1/asuresh/BL_GC_Survey/PulseProf/A00_0138_58733/  ; Output path (created if non-existent)

# Bandpass information stored on disk
[bandpass]
bandpass_file =                                                  ; Bandpass file name (d: basename+'_bandpass.npz')
BANDPASS_DIR = /home/ella1/asuresh/BL_GC_Survey/Bandpass/ ; Path to bandpass_file (d: DATA_DIR)

# RFI mask
[rfimask]
mask_file =                                                      ; Mask file name (d: basename+'_rfimask.npz')
MASK_DIR = /home/ella1/asuresh/BL_GC_Survey/Masks/   ; Path to mask file (d: DATA_DIR)

# Zerodm the dynamic spectrum and time series. (Remove mean across frequency from each time slice independently.)
do_zerodm = True; Do you want to perform zerodm? (True/False) (d: False)

# Dedispersion parameters
[dedispersion]
DM = 0.0        ; DM (pc/cc) at which dynamic spectrum must be dedispersed. (d: 0)

# Use subbands.
[subbands]
use_subbands = False ; Use subbands defined when computing bandpass? (True/False) (d: False)

# Data load
[dataload]
N_blocks = 50       ; No. of blocks in which data are to be loaded. (d: 1)

# Polarization indices to extract (0 = Stokes-I, 1 = Stokes-Q, 2 = Stokes-U, 3 = Stokes-V)
[polarization]
pol =               ; (d: 0)

[band_edges]
freq_band_low = 4.1   ; Lowest frequency (GHz) to be considered.
freq_band_high = 8.0  ; Highest frequency (GHz) to be considered.

# Smoothing parameters
[smoothing]
do_smoothing = True               ; Do you want to [erform smoothing of the dynamic spectrum? (True/False) (d: True)
smoothing_method = Blockavg2D      ; Available methods: 'hanning', 'hamming', 'blackman', 'Gaussian2D', 'Blockavg2D' (d: Blockavg2D)
convolution_method = fftconvolve   ; Use 'fftconvolve' or 'fft2' for performing convolution. (d: fftconvolve)
kernel_size_freq_chans = 256       ; No. of channels constituting a spectral kernel (Gaussian FWHM / window length)
kernel_size_time_samples = 16      ; No. of samples constituting a temporal kernel (Gaussian FWHM / window length)
