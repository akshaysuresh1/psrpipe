# Read in a filterbank file, remove bandpass and zerodm, and downsample the data.

[data]
psrfits_file = puppi_58506_J1136+1551_1345_0001.fits ; Filterbank file to load
DATA_DIR = /home/ella1/asuresh/M87_Arecibo2019A/TestPulsar/20190123 ; Path to .fil file

[output]
basename = puppi_58506_J1136+1551_1345_0001 ; Basename of output products
# Path to which output products must be saved, will be created if non-existent. (d: DATA_DIR)
OUTPUT_DIR = /home/ella1/asuresh/M87_Arecibo2019A/TestPulsar/20190123/Dsamp

[band_edges]
freq_band_low = 1.15   ; Lowest frequency (GHz) to be considered.
freq_band_high = 1.73  ; Highest frequency (GHz) to be considered.

# Polarization index to extract (0 = Stokes-I, 1 = Stokes-Q, 2 = Stokes-U, 3 = Stokes-V).
[polarization]
pol =             ; (d: 0)

[rfimask]
rfimask = puppi_58506_J1136+1551_1345_0001_rfifind.mask ; Rfifind mask to be applied on data
RFIMASK_DIR = /home/ella1/asuresh/M87_Arecibo2019A/TestPulsar/20190123 ; Path to rfi_mask (d: DATA_DIR)

[bandpass]
bandpass_method = compute ; "compute"/"file" (Compute median bandpass from loaded data, or load pre-computed bandpass from a .npz file.)
bandpass_npz = ; Name of .npz file containing pre-computed bandpass
BANDPASS_DIR = ; Path to bandpass_npz (d: DATA_DIR)

[zerodm]
remove_zerodm = ; Apply zerodm removal? (True/False) (d: False)

# Smoothing parameters
[smoothing]
smoothing_method = Blockavg2D      ; Available methods: 'hanning', 'hamming', 'blackman', 'Gaussian2D', 'Blockavg2D' (d: 'Blockavg2D')
convolution_method = fftconvolve   ; Use 'fftconvolve' or 'fft2' for performing convolution. (d: fftconvolve)
kernel_size_freq_chans = 4      ; No. of channels constituting a spectral kernel (Gaussian FWHM / window length)
kernel_size_time_samples = 8      ; No. of samples constituting a temporal kernel (Gaussian FWHM / window length)
