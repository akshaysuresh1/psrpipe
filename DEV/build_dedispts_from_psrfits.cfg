# Build a dedispersed dynamic spectrum and time series from a set of PSRFITS files.

# Load data in one large single chunk.
[data]
glob_fits_files = puppi_58101_J0623+15_1494_*.fits                ; Glob string to parse PSRFITS files
DATA_DIR = /mnt/toaster1/data/asuresh/PALFA/J0623+15/Data/ ; Path to data directory

[output]
basename = puppi_58101_J0623+15_1494                      ; Basename for output plots or data products
OUTPUT_DIR = /mnt/toaster1/data/asuresh/PALFA/J0623+15/Dedispersed_DS/Files/  ; Output path (created if non-existent)
BANDPASS_DIR = /mnt/toaster1/data/asuresh/PALFA/J0623+15/Bandpass/      ; Path to which bandpass plot must be saved (d: OUTPUT_DIR)
DS_SAVE_DIR = /mnt/toaster1/data/asuresh/PALFA/J0623+15/Dedispersed_DS/Plots/ ; Path to which plot of dedispersed dynamic spectrum must be saved (d: OUTPUT_DIR)

[plotting]
show_plot = False       ; Do you want to view the plots live during execution? (True/False) (d: False)
log_colorbar_ds = False ; Log-scale colorbar for dynamic spectrum. (True/False) (d: False)
# Minimum value of colorbar axis. Accepted value include floats, 'median-Nsigma' where N is a float, 'mean-Nsigma'.
vmin_percentile = 5; Percentile (0-100) of data to set as lower bound for flux density in dynamic spectrum plot (d: data minimum)
vmax_percentile = 95; Percentile (0-100) of data to set as lower bound for flux density in dynamic spectrum plot (d: data maximum)


# Dedispersion parameters
[dedispersion]
DM = 92.5         ; DM (pc/cc) at which dynamic spectrum must be dedispersed. (d: 0)

# Polarization index to extract (0 = Stokes-I, 1 = Stokes-Q, 2 = Stokes-U, 3 = Stokes-V)
[polarization]
pol =               ; Integer (d: 0)

[band_edges]
freq_band_low = 1.15   ; Lowest frequency (GHz) to be considered.
freq_band_high = 1.73  ; Highest frequency (GHz) to be considered.

# Smoothing parameters
[smoothing]
smoothing_method = Blockavg2D      ; Available methods: 'hanning', 'hamming', 'blackman', 'Gaussian2D', 'Blockavg2D'
convolution_method = fftconvolve   ; Use 'fftconvolve' or 'fft2' for performing convolution. (d: fftconvolve)
kernel_size_freq_chans = 8       ; No. of channels constituting a spectral kernel (Gaussian FWHM / window length)
kernel_size_time_samples = 4      ; No. of samples constituting a temporal kernel (Gaussian FWHM / window length)
